{"ast":null,"code":"var _jsxFileName = \"/home/rahul/Desktop/mern-mart-with-redux/client/src/components/items.js\";\nimport React, { Component } from \"react\";\nimport { MDBBtn, MDBInput } from \"mdbreact\";\nimport { connect } from \"react-redux\";\n\nclass Item extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      customlist: [],\n      searchlist: [],\n      toggle: \"none\",\n      add: [],\n      clickedbtns: this.props.clickedbtns\n    };\n\n    this.search = async val => {\n      await this.setState({\n        searchlist: []\n      });\n      val = val.replace(/[\\])}[*+{(\\\\]/g, \"\").toUpperCase();\n      let arr = this.state.customlist.filter(item => {\n        return String(Object.keys(item)).search(val) >= 0 ? String(Object.keys(item)) : false;\n      });\n      arr.map(item => {\n        this.setState({\n          searchlist: [React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, React.createElement(\"button\", {\n            key: Object.keys(item),\n            onClick: e => this.props.selectedItems(item),\n            value: Object.keys(item),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, Object.keys(item)), React.createElement(\"input\", {\n            placeholder: \"1\",\n            onChange: e => {\n              this.props.ItemsQuantity({\n                [Object.keys(item)]: e.target.value\n              });\n            },\n            type: \"Number\",\n            min: 1,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          })), ...this.state.searchlist]\n        });\n      });\n    };\n\n    this.clickedbtns = () => {\n      return this.state.clickedbtns.map(btn => {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          style: {\n            fontSize: \"10px\",\n            fontWeight: \"bold\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, Object.keys(btn), \"\\xA0\\xA0\", btn[Object.keys(btn)]));\n      });\n    };\n\n    this.dropdownToggle = () => {\n      this.setState({\n        toggle: this.state.toggle === \"\" ? \"none\" : \"\"\n      });\n    };\n  }\n\n  //  it will send a get request to server and fetch the list of items stored in mongoDB\n  async componentDidMount() {\n    let arr = await this.props.itemlist.map(item => {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        key: item._id,\n        onClick: e => this.props.selectedItems({\n          [item.name]: 1\n        }),\n        value: Object.keys(item),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, item.name), React.createElement(\"input\", {\n        placeholder: \"1\",\n        type: \"Number\",\n        onChange: e => {\n          this.props.ItemsQuantity({\n            [item.name]: e.target.value\n          });\n        },\n        min: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n    });\n    let arr1 = await this.props.itemlist.map(item => {\n      return {\n        [item.name]: 1\n      };\n    });\n    this.setState({\n      searchlist: [...arr],\n      customlist: [...arr1]\n    });\n  }\n  /* search function will search the items according to value typed in search bar\n    and also update the state with desired button and input field for quantity\n  */\n\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btnlist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, this.clickedbtns())), React.createElement(\"div\", {\n      className: \"accordion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(MDBBtn, {\n      className: \"acc-btn\",\n      gradient: \"blue\",\n      onClick: this.dropdownToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"dropdown\"), React.createElement(\"div\", {\n      style: {\n        display: this.state.toggle\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      label: \"search\",\n      onChange: e => this.search(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"content\",\n      style: {\n        height: \"150px\",\n        overflow: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.state.searchlist))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    itemlist: state.GetItems\n  };\n};\n\nexport default connect(mapStateToProps)(Item);","map":{"version":3,"sources":["/home/rahul/Desktop/mern-mart-with-redux/client/src/components/items.js"],"names":["React","Component","MDBBtn","MDBInput","connect","Item","state","customlist","searchlist","toggle","add","clickedbtns","props","search","val","setState","replace","toUpperCase","arr","filter","item","String","Object","keys","map","e","selectedItems","ItemsQuantity","target","value","btn","fontSize","fontWeight","dropdownToggle","componentDidMount","itemlist","_id","name","arr1","render","display","height","overflow","mapStateToProps","GetItems"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { MDBBtn, MDBInput } from \"mdbreact\";\nimport { connect } from \"react-redux\";\n\nclass Item extends Component {\n  state = {\n    customlist: [],\n    searchlist: [],\n    toggle: \"none\",\n    add: [],\n    clickedbtns: this.props.clickedbtns\n  };\n\n  //  it will send a get request to server and fetch the list of items stored in mongoDB\n\n  async componentDidMount() {\n    let arr = await this.props.itemlist.map(item => {\n      return (\n        <React.Fragment>\n          <button\n            key={item._id}\n            onClick={e => this.props.selectedItems({ [item.name]: 1 })}\n            value={Object.keys(item)}\n          >\n            {item.name}\n          </button>\n          <input\n            placeholder=\"1\"\n            type=\"Number\"\n            onChange={e => {\n              this.props.ItemsQuantity({\n                [item.name]: e.target.value\n              });\n            }}\n            min={1}\n          />\n        </React.Fragment>\n      );\n    });\n    let arr1 = await this.props.itemlist.map(item => {\n      return { [item.name]: 1 };\n    });\n    this.setState({ searchlist: [...arr], customlist: [...arr1] });\n  }\n\n  /* search function will search the items according to value typed in search bar\n    and also update the state with desired button and input field for quantity\n*/\n\n  search = async val => {\n    await this.setState({ searchlist: [] });\n    val = val.replace(/[\\])}[*+{(\\\\]/g, \"\").toUpperCase();\n    let arr = this.state.customlist.filter(item => {\n      return String(Object.keys(item)).search(val) >= 0\n        ? String(Object.keys(item))\n        : false;\n    });\n\n    arr.map(item => {\n      this.setState({\n        searchlist: [\n          <React.Fragment>\n            <button\n              key={Object.keys(item)}\n              onClick={e => this.props.selectedItems(item)}\n              value={Object.keys(item)}\n            >\n              {Object.keys(item)}\n            </button>\n            <input\n              placeholder=\"1\"\n              onChange={e => {\n                this.props.ItemsQuantity({\n                  [Object.keys(item)]: e.target.value\n                });\n              }}\n              type=\"Number\"\n              min={1}\n            />\n            <br />\n          </React.Fragment>,\n          ...this.state.searchlist\n        ]\n      });\n    });\n  };\n\n  clickedbtns = () => {\n    return this.state.clickedbtns.map(btn => {\n      return (\n        <React.Fragment>\n          <li style={{ fontSize: \"10px\", fontWeight: \"bold\" }}>\n            {Object.keys(btn)}&nbsp;&nbsp;{btn[Object.keys(btn)]}\n          </li>\n        </React.Fragment>\n      );\n    });\n  };\n\n  // function to control the dropdown behavior of button\n\n  dropdownToggle = () => {\n    this.setState({ toggle: this.state.toggle === \"\" ? \"none\" : \"\" });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"btnlist\">\n          <ul>{this.clickedbtns()}</ul>\n        </div>\n        <div className=\"accordion\">\n          <MDBBtn\n            className=\"acc-btn\"\n            gradient=\"blue\"\n            onClick={this.dropdownToggle}\n          >\n            dropdown\n          </MDBBtn>\n          <div style={{ display: this.state.toggle }}>\n            <MDBInput\n              label=\"search\"\n              onChange={e => this.search(e.target.value)}\n            />\n            <div\n              className=\"content\"\n              style={{ height: \"150px\", overflow: \"auto\" }}\n            >\n              {this.state.searchlist}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    itemlist: state.GetItems\n  };\n};\n\nexport default connect(mapStateToProps)(Item);\n"]},"metadata":{},"sourceType":"module"}